name: Build C++ Executable

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:12
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl zip unzip tar cmake pkg-config build-essential g++ gcc

      - name: Clone vcpkg
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg
          ref: aac8812f26c3d13ea42bc1baaffae273385911aa

      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
            
      - name: Setup vcpkg
        run: |
          cd $VCPKG_ROOT
          ./bootstrap-vcpkg.sh -disableMetrics

      - name: Install dependencies
        run: sudo apt-get install -y autoconf automake binutils-dev cmake libboost-all-dev libdouble-conversion-dev libdwarf-dev libevent-dev libgflags-dev libgmock-dev libgtest-dev liblz4-dev libsnappy-dev libsodium-dev libtool libzstd-dev ninja-build zlib1g-dev zstd

      - name: Configure CMake
        run: |
          cmake -B ${{ github.workspace }}/build -DCMAKE_TOOLCHAIN_FILE=$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build Aeron
        run: cmake --build ${{ github.workspace }}/build --target aeron
        
      - name: Build Project
        run: cmake --build ${{ github.workspace }}/build --target streams_exec

      - name: Find executable path
        id: find_exe
        shell: bash
        run: |
          EXEC_PATH="${{ github.workspace }}/build/binaries/streams_exec"
          echo "Execute check if file exists"
          ls -la $(dirname "$EXEC_PATH") || echo "Directory not found"
          echo "executable_path=$EXEC_PATH" >> $GITHUB_OUTPUT

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: streams_exec-ubuntu
          path: ${{ steps.find_exe.outputs.executable_path }}
